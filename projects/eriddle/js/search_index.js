var search_data = {"index":{"searchIndex":["riddle","attempt()","backup()","checkrule()","checksuccess()","new()","restore()","solver()","to_s()","valid?()","riddlereadme","riddledoc"],"longSearchIndex":["riddle","riddle#attempt()","riddle#backup()","riddle#checkrule()","riddle#checksuccess()","riddle::new()","riddle#restore()","riddle#solver()","riddle#to_s()","riddle#valid?()","",""],"info":[["Riddle","","Riddle.html","","<p>This class represents the data structures and method used to solve\nEinstein&#39;s Riddle by implementing …\n"],["attempt","Riddle","Riddle.html#method-i-attempt","(rule,h,type)","<p>Attempts the placement of symbols for a particular rule on a particular\nhouse and a neighbor This function …\n"],["backup","Riddle","Riddle.html#method-i-backup","()","<p>Back up a copy of the solution space This requires the creation of a new\narray as the copy function only …\n"],["checkrule","Riddle","Riddle.html#method-i-checkrule","(rnum)","<p>Recursively consider the placement of a rule and its successors. The rule\nnot only attempts placement …\n"],["checksuccess","Riddle","Riddle.html#method-i-checksuccess","(rule,offset,house)","<p>Check whether the house or its neighbor can accommodate the rule\n<p>params:\n\n<pre>* +rule+ the contents of the rule ...</pre>\n"],["new","Riddle","Riddle.html#method-c-new","(rules)","<p>Constructs a new object with a blank solutions space and an array of the\n<code>rules</code> to be satified\n<p>params: …\n"],["restore","Riddle","Riddle.html#method-i-restore","(copy)","<p>Restore the solutions space to its former values Used in the case that an\nattempt fails\n"],["solver","Riddle","Riddle.html#method-i-solver","()","<p>Key method that initiates the solving of the puzzle starting with Rule 0.\nThe final result of this recursive …\n"],["to_s","Riddle","Riddle.html#method-i-to_s","()","<p>Creates a string representation of the solution workspace. <code>nil</code>\nvalues are represented as “???” …\n"],["valid?","Riddle","Riddle.html#method-i-valid-3F","()","<p>Checks if the solution space is valid returns Boolean indicating that all\nsymbols are uniquely placed …\n"],["riddleREADME","","riddleREADME_md.html","","<p>Einstein&#39;s Puzzle\n<p>This documentation is in 3 parts:\n<p>Background information compiled from riddledoc.md …\n"],["riddledoc","","riddledoc_md.html","","\n<pre> riddle.rb - A Ruby program to solve Einstein&#39;s Riddle</pre>\n<p>© Copyright 2021, Robert Batzinger. All rights …\n"]]}}